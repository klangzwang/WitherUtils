plugins {
    id 'java-library'
	id 'idea'
    id 'eclipse'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

repositories {
	mavenCentral()
	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name "Jei"
		url "https://maven.blamejared.com/"
		content {
			includeGroup "mezz.jei"
		}
	}
	maven {
		name "K-4u Mod maven"
		url "https://modmaven.dev/"
		content {
			includeGroup "mcjty.theoneprobe"
			includeGroup "mekanism"
		}
	}
    maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		name = "Rover656 Maven"
		url = uri("https://maven.rover656.dev/releases")
		content {
			includeGroup("com.enderio")
		}
	}
}

dependencies {
	implementation("net.neoforged:neoforge:21.0.86-beta")
	implementation("maven.modrinth:athena-ctm:${athenaVersion}")
	implementation("com.enderio:Regilite:${regiliteVersion}")
	implementation("curse.maven:jei-238222:5533450")
//	implementation("curse.maven:ato-405593:5553138")
//	implementation("curse.maven:allthemodium-364466:5609842")
//	runtimeOnly("mekanism:Mekanism:${mekanism_version}")
//	runtimeOnly("curse.maven:explorers-compass-491794:5474700")
//	runtimeOnly("curse.maven:natures-compass-252848:5474686")
}

base {
    archivesName = "${archive_base_name}-${mod_version}+mc${minecraft_version}"
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
	api {
		compileClasspath = main.compileClasspath
		resources.srcDirs = []
	}
	main {
		compileClasspath += api.output
		runtimeClasspath += api.output
		resources {
			srcDir "src/generated/resources"
		}
	}
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {

    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.api
        modSource project.sourceSets.main
    }
	client {
        systemProperty 'forge.enabledGameTestNamespaces', 'witherutils'
		jvmArguments.addAll('-Xmx4G')
	}
	server {
		systemProperty 'forge.enabledGameTestNamespaces', 'witherutils'
        programArgument '--nogui'
	}
	data {
		programArguments = ['--mod', 'witherutils',
							'--all',
							'--output', file('src/generated/resources/').absolutePath,
							'--existing', file('src/main/resources').absolutePath]
	}
}

tasks.withType(ProcessResources).configureEach
{
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta'])
	{
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach
{
    options.encoding = 'UTF-8'
}

jar {
	from sourceSets.api.output
}